package ${company_domain}.${project_basepkg}.service.common.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.AutoConfigureAfter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.Properties;
import tk.mybatis.spring.mapper.MapperScannerConfigurer;

//MyBatis扫描接口，使用的tk.mybatis.spring.mapper.MapperScannerConfigurer，如果你不使用通用Mapper，可以改为org.xxx...
//注意，由于MapperScannerConfigurer执行的比较早，所以必须有下面的注解
@Configuration
@Slf4j
@AutoConfigureAfter(MyBatisConfig.class)
public class MyBatisMapperScannerConfig {

    @Bean
    public MapperScannerConfigurer mapperScannerConfigurer${project_name}Master() {
        return this.mapperScannerConfigurer("sqlSessionFactory${project_name}Master");
    }

    @Bean
    public MapperScannerConfigurer mapperScannerConfigurer${project_name}Slave() {
        return this.mapperScannerConfigurer("sqlSessionFactory${project_name}Slave");
    }

    private MapperScannerConfigurer mapperScannerConfigurer(String sqlSessionFactoryName) {
        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();
        mapperScannerConfigurer.setSqlSessionFactoryBeanName(sqlSessionFactoryName);
        mapperScannerConfigurer.setBasePackage(${basePackages});  //mapper 类
        Properties properties = new Properties();
        properties.setProperty("notEmpty", "false");
        properties.setProperty("IDENTITY", "MYSQL");
        mapperScannerConfigurer.setProperties(properties);
        return mapperScannerConfigurer;
    }


}
